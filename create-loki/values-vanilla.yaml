loki:
  isDefault: false
  tolerations:
    - key: "vendor"
      operator: "Equal"
      value: "cosmotech"
      effect: "NoSchedule"
  nodeSelector:
    "cosmotech.com/tier": "monitoring"
  persistence:
    enabled: true
    storageClass: "${LOKI_STORAGE_CLASS}"
    existingClaim: "${LOKI_PVC_NAME}"
    accessModes:
    - ReadWriteOnce
    size: "${LOKI_PERSISTENCE_MEMORY}"
  config:
    auth_enabled: false
    table_manager:
      retention_deletes_enabled: true
      retention_period: "${LOKI_RETENTION_PERIOD}"
    limits_config:
      max_entries_limit_per_query: ${LOKI_MAX_ENTRIES_LIMIT_PER_QUERY}
grafana:
  enabled: false
  image:
    tag: "${GRAFANA_IMAGE_TAG}"
  tolerations:
    - key: "vendor"
      operator: "Equal"
      value: "cosmotech"
      effect: "NoSchedule"
  nodeSelector:
    "cosmotech.com/tier": "monitoring"

promtail:
  rbac:
    create: false
  namespace: ${MONITORING_NAMESPACE}
  config:
    clients:
      - url: http://loki.${MONITORING_NAMESPACE}:3100/loki/api/v1/push
    snippets:
      scrapeConfigs: |
        - job_name: kubernetes-pods
          pipeline_stages:
            {{- toYaml .Values.config.snippets.pipelineStages | nindent 4 }}
          kubernetes_sd_configs:
            - role: pod
              namespaces:
                names:
                  - ${MONITORING_NAMESPACE}
          relabel_configs:
            - source_labels:
                - __meta_kubernetes_pod_controller_name
              regex: ([0-9a-z-.]+?)(-[0-9a-f]{8,10})?
              action: replace
              target_label: __tmp_controller_name
            - source_labels:
                - __meta_kubernetes_pod_label_app_kubernetes_io_name
                - __meta_kubernetes_pod_label_app
                - __tmp_controller_name
                - __meta_kubernetes_pod_name
              regex: ^;*([^;]+)(;.*)?$
              action: replace
              target_label: app
            - source_labels:
                - __meta_kubernetes_pod_label_app_kubernetes_io_instance
                - __meta_kubernetes_pod_label_instance
              regex: ^;*([^;]+)(;.*)?$
              action: replace
              target_label: instance
            - source_labels:
                - __meta_kubernetes_pod_label_app_kubernetes_io_component
                - __meta_kubernetes_pod_label_component
              regex: ^;*([^;]+)(;.*)?$
              action: replace
              target_label: component
            {{- if .Values.config.snippets.addScrapeJobLabel }}
            - replacement: kubernetes-pods
              target_label: scrape_job
            {{- end }}
            {{- toYaml .Values.config.snippets.common | nindent 4 }}
            {{- with .Values.config.snippets.extraRelabelConfigs }}
            {{- toYaml . | nindent 4 }}
            {{- end }}
      pipelineStages:
      - cri: {}
      - match:
          selector: '{job="*"} |= "workflow"'
          stages:
            - json:
                expressions:
                  output: log
            - json:
                source: output
                expressions:
                  message: message
                  level: log.level
            - labels:
                tenant_id:
                message:
                namespace:
      - match:
          action: drop
          pipeline_name: keep only workflows logs
          selector: '{container!="main"}'
      - match:
          action: drop
          pipeline_name: drop redis
          selector: '{app="redis"}'
      - match:
          action: drop
          pipeline_name: drop minio
          selector: '{app="minio"}'
      - match:
          action: drop
          pipeline_name: drop postgresql
          selector: '{app="postgresql"}'
      - match:
          action: drop
          pipeline_name: drop cosmotech-api
          selector: '{app="cosmotech-api"}'
      - output:
          source: message
  tolerations:
    - key: "vendor"
      operator: "Equal"
      value: "cosmotech"
      effect: "NoSchedule"
  nodeSelector:
    "cosmotech.com/tier": "monitoring"